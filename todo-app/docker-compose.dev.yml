services:
  app:
    image: todo-frontend
    build:
      context: . # The context will pick this directory as the "build context"
      dockerfile: todo-frontend/dev.Dockerfile # This will simply tell which dockerfile to read
    volumes:
      - ./todo-frontend/:/usr/src/app # The path can be relative, so ./ is enough to say "the same location as the docker-compose.yml"
    # ports:
    #   - 3210:3000
    container_name: todo-frontend # This will name the container todo-frontend
    environment:
    - REACT_APP_BACKEND_URL=http://localhost:8888/api/
  server:                    # The name of the service, can be anything
    image: todo-backend    # Declares which image to use
    build:
      context: . # The context will pick this directory as the "build context"
      dockerfile: todobackend/dev.Dockerfile # This will simply tell which dockerfile to read
    volumes:
      - ./todo-backend:/usr/src/app/backend # The path can be relative, so ./ is enough to say "the same location as the docker-compose.yml"
    # ports:
    #   - 3333:3000
    container_name: todo-backend # This will name the container todo-backend
    environment:
      - REDIS_URL=redis://redis:6379
      - MONGO_URL=mongodb://the_username:the_password@mongo:27017/the_database
  
  nginx:
    image: nginx:1.20.1
    volumes:
      - ./nginx.dev.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 8888:80
    container_name: todo-app-reverse-proxy
    depends_on:
      - app # wait for the frontend container to be started
  
  mongo:
    image: mongo
    ports:
      - 3456:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: the_database
    volumes: 
      - ./todo-backend/mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
      - mongo_data:/data/db
  
  redis:
    image: redis
    ports:
      - 6379:6379
    volumes: 
      - redis_data:/data

volumes:
  mongo_data:
  redis_data: